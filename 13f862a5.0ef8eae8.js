(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{144:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(10),i=(n(0),n(167)),o={id:"delta-queries",title:"Delta Query Specification"},c={id:"spec-datasync/delta-queries",title:"Delta Query Specification",description:"Delta Queries extend the GraphQLCRUD spec to support offline-first GraphQL clients. It outlines the features and specifications needed to for smooth offline operation.",source:"@site/../docs/spec-datasync/spec-datasync.md",permalink:"/docs/next/spec-datasync/delta-queries",editUrl:"https://github.com/aerogear/GraphQLCRUD/edit/master/website/../docs/spec-datasync/spec-datasync.md",version:"next",sidebar:"docs",previous:{title:"Subscriptions",permalink:"/docs/next/subscriptions"},next:{title:"Server-Side Conflict Resolution",permalink:"/docs/next/spec-datasync/conflict-resolution"}},s=[{value:"What are Delta Queries?",id:"what-are-delta-queries",children:[]}],l={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Delta Queries extend the GraphQLCRUD spec to support offline-first GraphQL clients. It outlines the features and specifications needed to for smooth offline operation."),Object(i.b)("p",null,"It consists of two aspects:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Fetch data that was changed based on a client side ",Object(i.b)("inlineCode",{parentName:"li"},"lastChanged")," token."),Object(i.b)("li",{parentName:"ul"},"Ensure data consistency using the aforementioned ",Object(i.b)("inlineCode",{parentName:"li"},"lastChanged")," token provided.")),Object(i.b)("h3",{id:"what-are-delta-queries"},"What are Delta Queries?"),Object(i.b)("p",null,"These are a special kind of query that necessarily takes a ",Object(i.b)("inlineCode",{parentName:"p"},"lastChanged")," argument and for every type that fetches the changed data for that type since the point in time specified by the ",Object(i.b)("inlineCode",{parentName:"p"},"lastChanged")," argument. An example type definition for this would be:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"type Comment {\n  id: ID!\n  text: String\n  description: String\n}\n\ntype Query {\n  syncComments(lastChanged: String!, filter: CommentFilter): CommentDeltaList!\n}\n")),Object(i.b)("p",null,"In the above example, the delta query is ",Object(i.b)("inlineCode",{parentName:"p"},"syncComments")," which returns a list of ",Object(i.b)("inlineCode",{parentName:"p"},"CommentDelta")," type:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"type CommentDelta {\n  id: ID!\n  text: String\n  description: String\n  createdAt: String\n  updatedAt: String\n  _deleted: Boolean\n}\n\ntype CommentDeltaList {\n  items: [CommentDelta]!\n  lastChanged: String\n}\n")),Object(i.b)("p",null,"Each object of this list is a snapshot of the current state of the row/document in the database, along with the timestamps that show when it was last changed(",Object(i.b)("inlineCode",{parentName:"p"},"updatedAt"),"), and when it was created(",Object(i.b)("inlineCode",{parentName:"p"},"createdAt"),"). It also provides info on if the row was deleted(",Object(i.b)("inlineCode",{parentName:"p"},"_deleted"),"), in which case ",Object(i.b)("inlineCode",{parentName:"p"},"updatedAt")," says when it was deleted."),Object(i.b)("p",null,"The objects to be fetched in the delta query can also be filtered by using the ",Object(i.b)("inlineCode",{parentName:"p"},"filter")," argument\nwhich would work exactly like the filter in the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/next/find"}),"find")," query."))}p.isMDXComponent=!0},167:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return f}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),b=a,f=d["".concat(o,".").concat(b)]||d[b]||u[b]||i;return n?r.a.createElement(f,c(c({ref:t},l),{},{components:n})):r.a.createElement(f,c({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);