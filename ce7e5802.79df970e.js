(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{155:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return p})),t.d(e,"metadata",(function(){return o})),t.d(e,"rightToc",(function(){return l})),t.d(e,"default",(function(){return s}));var i=t(2),r=t(10),a=(t(0),t(166)),p={id:"spec-find",title:"Find Operation"},o={id:"spec-find",title:"Find Operation",description:"Find multiple objects Specification",source:"@site/../docs/spec-find.md",permalink:"/docs/next/spec-find",editUrl:"https://github.com/aerogear/GraphQLCRUD/edit/master/website/../docs/spec-find.md",version:"next",sidebar:"docs",previous:{title:"Delete operation",permalink:"/docs/next/spec-delete"},next:{title:"Get Operation",permalink:"/docs/next/spec-getOne"}},l=[{value:"Find multiple objects Specification",id:"find-multiple-objects-specification",children:[]},{value:"Variations",id:"variations",children:[{value:"Pagination",id:"pagination",children:[]}]}],c={rightToc:l};function s(n){var e=n.components,t=Object(r.a)(n,["components"]);return Object(a.b)("wrapper",Object(i.a)({},c,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"find-multiple-objects-specification"},"Find multiple objects Specification"),Object(a.b)("p",null,"Find operation can be respresented as follows"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-graphql"}),"type Query {\n  findNotes(filter: NoteFilter, orderBy: OrderByInput): [NoteResultList]!\n}\n")),Object(a.b)("p",null,"Finding objects can be done by creating numerous helpers.\nFilter input type:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-graphql"}),"input NoteFilter {\n  id: IDInput\n  title: StringInput\n  clickCount: IntInput\n  floatValue: FloatInput\n  description: StringInput\n  and: [NoteFilter]\n  or: [NoteFilter]\n  not: NoteFilter\n}\n")),Object(a.b)("p",null,"OrderBy input type:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-graphql"}),"input OrderByInput {\n  field: String!\n  order: SortDirectionEnum = ASC\n}\n\nenum SortDirectionEnum {\n  DESC\n  ASC\n}\n")),Object(a.b)("p",null,"To enable filtering for specific Scalars we can create individual InputTypes.\nFor example for String scalar this could be:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-graphql"}),"input StringInput {\n  ne: String\n  eq: String\n  le: String\n  lt: String\n  ge: String\n  gt: String\n  in: [String]\n  contains: String\n  startsWith: String\n  endsWith: String\n}\n\ninput BooleanInput {\n  ne: String\n  eq: String\n}\n\ninput FloatInput {\n  ne: String\n  eq: String\n  le: String\n  lt: String\n  ge: String\n  gt: String\n  in: [String]\n}\n\ninput IntInput {\n  ne: String\n  eq: String\n  le: String\n  lt: String\n  ge: String\n  gt: String\n  in: [String]\n}\n")),Object(a.b)("p",null,"For ID type input will look as follows:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-graphql"}),"input IDInput {\n  ne: ID\n  eq: ID\n}\n")),Object(a.b)("h2",{id:"variations"},"Variations"),Object(a.b)("h3",{id:"pagination"},"Pagination"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-graphql"}),"type Query {\n  findNotes(filter: NoteFilter, page: PageRequest, orderBy: OrderByInput): NoteResultList!\n}\n\n## Special type created as wrapper for pagination\ntype NoteResultList {\n  items: [Note]!\n  offset: Int\n  limit: Int\n  count: Int\n}\n\n## Represents page request\ninput PageRequest {\n  limit: Int\n  offset: Int\n}\n")))}s.isMDXComponent=!0}}]);